<template>
  <van-nav-bar
    border="{{false}}"
    left-arrow
    bind:click-left="navBack"
    title-class="nav-bar-title"
  >
    <view
      slot="title"
      class="custome-nav"
      style="padding-right:{{menuButtonLeft}}px;"
    >
      商品详情
    </view>
  </van-nav-bar>
  <scroll-view
    class="scrollable"
    scroll-y
  >
  <!-- 轮播 -->
  <swiper indicator-dots class="" style="height: 750rpx;">
    <swiper-item wx:for="{{swiperList}}" wx:key="index">
      <image class="w-full h-full object-center object-cover" lazy-load="{{true}}" src="{{item.src}}" mode="aspectFill"/>
    </swiper-item>
  </swiper>

  <!-- 商品信息 -->
  <view class="m-2 py-3 px-2 bg-white rounded-md">
    <view class="flex items-center justify-between">
      <view class="flex items-center">
        <view class="flex text-red-600 items-center">
          <text class="text-xs font-bold pt-2px">￥</text>
          <text class="text-lg font-bold">{{productPrice / 100}}</text>
          <text class="text-xs pt-2px ml-2px"> 起</text>
        </view>
        <view class="text-gray-600 line-through text-xs ml-1">￥59起</view>
      </view>
      <view class="text-gray-600" style="font-size:12px;">
        <text wx:if="{{inventorys > 0}}">库存 {{inventorys}} {{productInfo.unit || ''}}</text>
        <text wx:else>暂无库存</text>
      </view>
    </view>
    <view class="flex text-sm font-bold mt-2">
      {{productInfo.title}}
    </view>
    <view class="text-xs text-gray-600 mt-1">
      {{productInfo.sub_title}}
    </view>
  </view>

  <!-- 规格/地址/运费 -->
  <view class="m-2 bg-white rounded-md overflow-hidden">
    <!-- 规格 -->
    <view wx:if="{{guides.length}}" class="flex flex-nowrap items-center p-3">
      <view class="text-xs text-gray-600 mr-3">选择</view>
      <view bind:tap="openGuideModel('')" class="flex-1 flex flex-nowrap justify-between items-center">
        <view class="text-black text-xs font-bold">商品规格</view>
        <van-icon name="arrow" size="14"/>
      </view>
    </view>
    <!-- 地址 -->
    <view class="flex flex-nowrap items-center p-3">
      <view class="text-xs text-gray-600 mr-3">送至</view>
      <view bind:tap="openAddressListPopup" class="flex-1 flex flex-nowrap justify-between items-center">
        <view class="text-black text-xs font-bold">{{ currentAddress ? currentAddress.location : '请选择地址'}}</view>
        <van-icon name="arrow" size="14"/>
      </view>
    </view>
    <!-- 运费 -->
    <view class="flex flex-nowrap items-center p-3">
      <view class="text-xs text-gray-600 mr-3">运费</view>
      <view class="flex-1 flex flex-nowrap justify-between items-center">
        <view wx:if="{{productInfo.freight}}" class="text-black text-xs font-bold">￥{{productInfo.freight / 100}}起</view>
        <view wx:else class="text-black text-xs font-bold">免运费</view>
      </view>
    </view>
    <!-- 提示 -->
    <!-- <view class=" px-4 py-3 bg-slate-200 flex items-center">
      <van-icon name="close" size="14" />
      <text class="ml-1 text-xs text-gray-600">不支持7天无理由退货</text>
    </view> -->
  </view>

  <!-- 食谱 -->
   <recipes-block></recipes-block>

  <!-- 商品详情 -->
  <view class="m-2 rounded-md bg-white p-2">
    <view class="flex items-center">
      <view class="mr-2" style="background:linear-gradient(to top, rgb(255, 96, 52), rgb(238, 10, 36));width:2px;height:14px;"></view>
      <text class="text-xs font-bold">商品详情</text>
    </view>
    <view class="mt-2" style="min-height:300px;">
      <editor
        read-only
        style="height:auto;"
        class=""
        wx:ref="editor"
        bind:ready="bindready"
      ></editor>
    </view>
  </view>
  <view class="h-1"></view>
</scroll-view>
<van-goods-action class="z-10">
  <van-goods-action-icon bind:tap="navToHome" icon="wap-home-o" text="首页" />
  <van-goods-action-icon bind:tap="navToShopingCart" icon="cart-o" text="购物车" />
  <van-goods-action-button
    text="加入购物车"
    type="warning"
    bind:click="openGuideModel('cart')"
  />
  <van-goods-action-button
    text="立即购买"
    bind:click="openGuideModel('buy')"
  />
</van-goods-action>
<view style="height:50px;"></view>
<view class="safe-area-inset-bottom"></view>

<!-- 选择规格/数量 -->
<van-popup
  show="{{ showGuideModel }}"
  position="bottom"
  round
  z-index="110"
  custom-style="max-height: 60%"
  bind:close="closeGuideModel"
>
  <!-- 规格 -->
  <view class="px-4 py-3">
    <view class="mt-3" wx:for="{{guides}}" wx:key="id" wx:for-item="guide">
      <view class="text-sm font-bold">{{guide.title}}</view>
      <view class="mt-2 px-2 flex flex-wrap gap-3">
        <view
          class="{{item.checked ? 'bg-red-600 text-white' : 'bg-slate-100 text-black'}} rounded-full font-bold px-4 py-1 text-xs"
          wx:for="{{guide.children}}"
          wx:key="id"
          bind:tap="selectGuide(guide.id,item.id)"
        >{{item.title}}</view>
      </view>
    </view>
  </view>
  <!-- 数量 -->
  <view class="flex flex-nowrap justify-between p-4">
    <view class="text-xs font-bold">数量</view>
    <i-stepper
      value="{{number}}"
      bind:plus="onPlus"
      bind:minus="onMinus"
    ></i-stepper>
  </view>
  <van-goods-action custom-class="px-2 z-10">
      <van-goods-action-button
        wx:if="{{!popupActionType || popupActionType==='cart'}}"
        text="加入购物车"
        type="warning"
        bind:click="addToShopingCart"
      />
      <van-goods-action-button
        wx:if="{{!popupActionType || popupActionType==='buy'}}"
        text="立即购买"
        bind:click="clickBuyNow"
      />
  </van-goods-action>
  <view style="height:50px;"></view>
  <view class="safe-area-inset-bottom"></view>
</van-popup>
<select-address show="{{showAddressList}}" bind:close="closeAddressListPopup"></select-address>
</template>

<script>
import mpx, { createPage, onLoad, ref, getCurrentInstance } from '@mpxjs/core'
import {
  productApi
  // mallCartApi
} from '@/api/product'
import { mallCartApi } from '@/api/mall'
import { ASSET_BASE_URL } from '@/config/index'
import { useBasicDataStore } from '@/store/base'
import { storeToRefs } from '@mpxjs/pinia'
import Big from 'big.js'

createPage({
  setup() {
    const productInfo = ref({})
    const guides = ref([])
    const showGuideModel = ref(false)
    const showAddressList = ref(false)
    const swiperList = ref([])
    const productPrice = ref(0)
    const basicData = useBasicDataStore()
    const { currentAddress } = storeToRefs(basicData)
    const instance = getCurrentInstance()

    const menuRect = mpx.getMenuButtonBoundingClientRect()
    const windowInfo = wx.getWindowInfo()
    const menuButtonLeft = windowInfo.windowWidth - menuRect.left
    const popupActionType = ref('')

    const number = ref(1)

    const onPlus = () => {
      number.value++
    }
    const onMinus = () => {
      number.value--
    }

    const openGuideModel = (type) => {
      popupActionType.value = type
      showGuideModel.value = true
    }

    const closeGuideModel = () => {
      showGuideModel.value = false
    }

    // 组装商品规格
    const getProductGuides = () => {
      let _guides = ''
      guides.value.forEach(guide => {
        guide.children.forEach(i => {
          if (i.checked) {
            _guides += i.title
          }
        })
      })
      return _guides || undefined
    }

    // 添加到购物车
    const addToShopingCart = async () => {
      if (!basicData.customer.id) {
        await basicData.getCustomerInfo()
      }
      const data = {
        customer_id: basicData.customer.id,
        product_id: productInfo.value.id,
        number: number.value,
        unit_price: productInfo.value.retail_price,
        title: productInfo.value.title,
        guides: getProductGuides()
      }
      await mallCartApi.create(data)
      mpx.showToast({
        title: '添加成功',
        icon: 'success'
      })
      closeGuideModel()
    }

    // 查询商品规格
    const initGuides = data => {
      data.forEach(guide => {
        guide.children.forEach((item, index) => {
          item.checked = index === 0
        })
      })
      guides.value = data
    }

    // 选择规格
    const selectGuide = (guideId, itemId) => {
      guides.value.forEach(guide => {
        if (guide.id === guideId) {
          guide.children.forEach(i => {
            i.checked = i.id === itemId
          })
        }
      })
    }

    // 设置商品详情
    const setEditorContent = delta => {
      const editor = instance.target.$refs.editor
      editor.context(({ context }) => {
        console.log({ context })
        delta.forEach(item => {
          item.attributes = item.attributes || {}
          item.attributes.backgroundColor = item.attributes.background
          item.attributes.wordBreak = 'break-all'
          item.attributes.wordWrap = 'break-word'
          item.attributes.whiteSpace = 'normal'
          item.attributes.overflowWrap = 'break-word'
          if (typeof item.insert === 'object' && item.insert.image) {
            item.attributes.width = '100%'
          }
        })
        context.setContents({
          delta,
          success(success) {
            console.log({ success })
          },
          fail(fail) {
            console.log({ fail })
          }
        })
      }).exec()
    }

    const inventorys = ref('')
    const initInventorys = data => {
      const num = data.reduce((big, item) => {
        return big.plus(item.quantity)
      }, Big(0)).toNumber()
      inventorys.value = num
    }

    // 初始化数据
    const initData = async (id) => {
      const res = await productApi.findOne(id)
      const head_imgs = res.head_imgs ? JSON.parse(res.head_imgs) : []
      head_imgs.forEach(i => {
        i.src = ASSET_BASE_URL + i.url
      })
      swiperList.value = head_imgs
      productInfo.value = res
      productPrice.value = res.retail_price
      console.log('initData', { res })
      initGuides(res.guides)
      initInventorys(res.inventorys || [])
      const detail = res.detail ? JSON.parse(res.detail) : []
      if (detail.length) {
        setEditorContent(detail)
      }
    }

    onLoad((opts) => {
      initData(opts.id)
      // findGuides(opts.id)
    })

    // 立即购买
    const clickBuyNow = () => {
      const data = [{
        ...productInfo.value,
        number: number.value,
        guides: getProductGuides()
      }]
      mpx.navigateTo({
        url: '/pages/payment/index',
        success(e) {
          e.eventChannel.emit('data', data)
        }
      })
      closeGuideModel()
    }

    // 选择规格确认
    const selectGuideConfirm = () => {

    }

    const navBack = () => {
      mpx.navigateBack()
    }

    const bindready = (e) => {
      console.log({ e })
    }

    const navToHome = () => {
      mpx.switchTab({
        url: '/pages/home/index'
      })
    }

    const navToShopingCart = () => {
      mpx.switchTab({
        url: '/pages/cart/index'
      })
    }

    const openAddressListPopup = () => {
      showAddressList.value = true
    }
    const closeAddressListPopup = () => {
      showAddressList.value = false
    }

    return {
      inventorys,
      closeAddressListPopup,
      openAddressListPopup,
      showAddressList,
      currentAddress,
      popupActionType,
      number,
      onPlus,
      onMinus,
      menuButtonLeft,
      productPrice,
      productInfo,
      guides,
      selectGuide,
      showGuideModel,
      openGuideModel,
      closeGuideModel,
      addToShopingCart,
      clickBuyNow,
      selectGuideConfirm,
      navBack,
      swiperList,
      bindready,
      navToHome,
      navToShopingCart
    }
  }

})
</script>

<style>
.nav-bar-title{
  max-width: 100% !important;
}
.van-nav-bar__left{
  z-index: 10;
}
.custome-nav{
  padding-left: 32px
}
</style>

<script name="json">
module.exports = {
  "usingComponents": {
    "van-goods-action": "@vant/weapp/goods-action/index",
    "van-goods-action-icon": "@vant/weapp/goods-action-icon/index",
    "van-goods-action-button": "@vant/weapp/goods-action-button/index",
    "van-popup": "@vant/weapp/popup/index",
    "i-stepper":"@/components/stepper/index",
    "select-address":"@/components/select-address/index",
    "recipes-block":"./recipes-block"
  }
}
</script>
