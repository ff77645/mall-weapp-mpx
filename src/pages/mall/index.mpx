<template>
  <van-nav-bar
    title="商城"
  />
  <view class="flex-1 bg-slate-100 flex flex-col overflow-hidden">
    <!-- 商品分类 -->
    <van-tabs active="{{ activeIndex }}" bind:click="clickTab">
      <van-tab
        wx:for="{{categoryList}}"
        wx:key="id"
        title="{{item.title}}"
      ></van-tab>
    </van-tabs>
    <!-- 商品列表 -->
    <scroll-view
      class="flex-1 group-list overflow-hidden"
      scroll-y
      scroll-with-animation
      scroll-into-view="c{{currentCategoryId}}"
      bind:scroll="handleScroll"
    >
      <view class="grid grid-cols-2 gap-3 p-2">
        <view
          wx:for="{{productList}}"
          wx:key="id"
          id="c{{item.active_id}}"
          class="bg-white rounded-md overflow-hidden flex-col flex product"
          bind:tap="navToProductDetail(item.id)"
        >
          <!-- 商品图片 -->
          <image
            src="{{ASSET_BASE_URL + item.url}}"
            mode="aspectFill"
            class="w-full flex-none"
            lazy-load
          />
          <view class="p-2 flex-1 flex flex-col justify-between overflow-hidden self-stretch">
            <view>
              <view class=" text-gray-900 van-multi-ellipsis--l2">{{item.title}}</view>
              <view class="text-gray-600 text-xs van-multi-ellipsis--l2">{{item.sub_title}}</view>
            </view>
            <view class="flex justify-between items-center">
              <view class="text-gray-500" style="font-size:10px;">已购1万</view>
              <view class="text-red-500 font-bold text-sm">￥{{item.retail_price / 100}}</view>
            </view>
          </view>
        </view>
      </view>
    </scroll-view>
  </view>
  <view style="height:calc(50px + env(safe-area-inset-bottom));"></view>
</template>

<script>
import mpx, { createPage } from '@mpxjs/core'
import {
  productApi,
  productCategoryApi
} from '@/api/product'
import { ASSET_BASE_URL } from '@/config/index'

createPage({
  data: {
    productList: [],
    ASSET_BASE_URL,
    categoryList: [],
    activeIndex: 0,
    scrollTop: 0,
    currentCategoryId: ''
  },
  onLoad() {
    this.setTabBar()
    // this.initProductList()
    this.initCategoryList()
    this.getScrollListTop()
  },
  async initProductList() {
    mpx.showLoading({ title: '加载中' })
    const res = await productApi.findAll({ page: 1, limit: 100 })
    console.log({ res })
    const ids = []
    const data = []
    this.categoryList.forEach(category => {
      const d = res.data.filter(i => i.category_id === category.id)
      data.push(...d)
    })
    data.forEach(item => {
      const images = item.head_imgs ? JSON.parse(item.head_imgs) : []
      item.url = images.length ? images[0].url : ''
      if (!ids.includes(item.category_id)) {
        item.active_id = item.category_id
        ids.push(item.category_id)
      }
    })
    this.productList = data
    mpx.hideLoading()
    setTimeout(() => {
      this.getCategoryTitleTop()
    }, 100)
  },
  async initCategoryList() {
    const res = await productCategoryApi.findAll()
    console.log({ res })
    this.categoryList = res
    this.initProductList()
  },
  clickTab({ detail: { index } }) {
    this.activeIndex = index
    this.currentCategoryId = this.categoryList[index].id
  },
  // 节流时间
  throttleTime: 600,
  // 切换分类
  changeCategory({ target }) {
    const { index, id } = target.dataset
    this.setData({
      activeIndex: index,
      group_id: 'g' + id
    })
  },
  getScrollListTop() {
    this.createSelectorQuery()
      .select('.group-list')
      .boundingClientRect(res => {
        console.log('getScrollListTop', res)
        this.scrollListTop = res.top
      })
      .exec()
  },
  handleScroll({ detail: { scrollTop } }) {
    const index = this.categoryList.findIndex(i => i.top >= scrollTop)
    this.activeIndex = index
  },
  getCategoryTitleTop() {
    this.createSelectorQuery()
      .selectAll('.product')
      .boundingClientRect((res) => {
        console.log({ res })
        res.forEach(i => {
          if (i.id.length < 2) return
          const id = i.id.slice(1)
          const index = this.categoryList.findIndex(i => i.id === id)
          this.categoryList[index].top = i.top - this.scrollListTop
        })
        // const { categoryList } = this.data
        // categoryList.forEach((item, index) => {
        //   item.top = res[index].top - this.scrollListTop
        //   const next = res[index + 1]
        //   item.bottom = next ? (next.top - this.scrollListTop) : item.top + 20
        // })
        // this.setData({ categoryList })
      })
      .exec()
  },
  goodsListScroll({ detail }) {
    const index = this.data.categoryList.findIndex(i => {
      return detail.scrollTop >= i.top && detail.scrollTop < i.bottom
    })
    if (index === this.data.activeIndex) return
    this.setData({ activeIndex: index })
  },
  // 初始化分类与商品数据
  async initDataFn() {
    // const [
    //   productCategory,
    //   productRes,
    //   packageCategory,
    //   packages,
    // ] = await Promise.all([
    //   getAllProductCategory(),
    //   getAllProduct({page:1,limit:1000}),
    //   packageCategoryApi.findAll(),
    //   packageApi.findAll({page:1,limit:100}),
    // ])
    // // console.log({packages,packageCategory});
    // console.log({productRes});

    // const categoryList = [...packageCategory,...productCategory]
    // categoryList.forEach(i=>{i.number = 0})

    // packages.data.forEach(i=>{
    //   i.type = 'package'
    //   i.groups = JSON.parse(i.groups)
    //   i.has_guide = i.groups.length && i.groups.some(i=>i.total !== i.optional)
    // })
    // const allProducts = [...packages.data,...productRes.data]
    // allProducts.forEach(i=>{
    //   i.unit_price = i.retail_price
    //   i.number = 0
    // })
    // const groupList = categoryList.map(item=>{
    //   return {
    //     title:item.title,
    //     id:item.id,
    //     children:allProducts.filter(i=>i.category_id === item.id)
    //   }
    // })
    // console.log({groupList});
    const categoryList = [
      {
        title: '跑跑鸡',
        id: 'ppj'
      },
      {
        title: '跳跳兔',
        id: 'ttt'
      },
      {
        title: '奔奔猪',
        id: 'bbz'
      }
    ]

    const groupList = categoryList.map(item => {
      return {
        title: item.title,
        id: item.id,
        children: Array.from({ length: 3 }).map((_, idx) => {
          return {
            id: item.id + idx,
            title: item.title + idx,
            unit_price: 1000 * idx,
            describe: 'describedescribedescribedescribedescribe'
          }
        })
      }
    })

    this.setData({
      groupList,
      categoryList
    }, () => {
      this.getCategoryTitleTop()
    })
  },
  setTabBar() {
    if (typeof this.getTabBar === 'function') {
      this.getTabBar((tabBar) => {
        tabBar.setData({
          active: 'mall'
        })
      })
    }
  },

  navToProductDetail(id) {
    mpx.navigateTo({
      url: '/pages/product-detail/index?id=' + id
    })
  }
})
</script>
<script name="json">
  module.exports = {
    usingComponents:{
      "van-tab": "@vant/weapp/tab/index",
      "van-tabs": "@vant/weapp/tabs/index"
    }
  }
</script>
